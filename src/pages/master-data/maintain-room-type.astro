---
import AppLayout from "@layouts/AppLayout.astro";
import Card from "@components/ui/Card.astro";
import { sampleRoomTypes, statusBadge, type RoomType } from "@data/room-type";

const rows = sampleRoomTypes;
---
<AppLayout title="Maintain Room Type">
  <Card title="Maintain Room Type" description="Kelola data Room Type" class="relative space-y-4">
    <button
      type="button"
      class="sm:absolute sm:right-6 sm:top-6 rounded-lg border border-slate-200 px-3 py-2 text-sm font-medium hover:border-brand-500 hover:text-brand-600"
      data-add
    >
      Add Room Type
    </button>
    <div class="flex flex-col gap-3 sm:mt-10 sm:flex-row sm:items-center sm:justify-between">
      <input
        type="text"
        placeholder="Search room type..."
        class="w-full rounded-lg border border-slate-200 px-3 py-2 text-sm focus:border-brand-500 focus:outline-none focus:ring-1 focus:ring-brand-500 sm:max-w-xs"
        data-search
      />
      
    </div>

    <div class="overflow-hidden rounded-xl border border-slate-100">
      <table class="min-w-full divide-y divide-slate-200 text-sm" data-table>
        <thead class="bg-slate-50 text-left text-xs font-semibold uppercase tracking-widest text-slate-500">
          <tr>
            <th class="px-4 py-3">Name</th>
            <th class="px-4 py-3">Description</th>
            <th class="px-4 py-3">Facilities</th>
            <th class="px-4 py-3">Status</th>
            <th class="px-4 py-3 text-right">Action</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-slate-100 bg-white text-slate-600" data-tbody>
          {rows.map((rt) => {
            const canEdit = rt.status === "revise" || rt.status === "approved";
            return (
              <tr data-row data-text={`${rt.name} ${rt.description} ${rt.facilities} ${rt.status}`}>
                <td class="px-4 py-3 font-medium text-slate-900">{rt.name}</td>
                <td class="px-4 py-3">{rt.description}</td>
                <td class="px-4 py-3">{rt.facilities}</td>
                <td class="px-4 py-3">
                  <span class={`rounded-full px-3 py-1 text-xs font-semibold uppercase tracking-widest ${statusBadge(rt.status)}`}>
                    {rt.status}
                  </span>
                </td>
                <td class="px-4 py-3 text-right">
                  <div class="flex items-center justify-end gap-3">
                    <button type="button" class="rounded-lg border border-slate-200 px-3 py-2 text-xs font-semibold hover:border-brand-500 hover:text-brand-600" data-view data-id={rt.id}>View</button>
                    {canEdit && (
                      <button type="button" class="rounded-lg border border-slate-200 px-3 py-2 text-xs font-semibold hover:border-brand-500 hover:text-brand-600" data-edit data-id={rt.id}>Edit</button>
                    )}
                  </div>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>

    <div class="fixed inset-0 z-[100] hidden flex items-center justify-center bg-slate-900/40 p-4" data-modal>
      <div class="w-full max-w-lg rounded-2xl border border-slate-200 bg-white p-4 shadow-xl flex max-h-[80vh] flex-col">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-slate-900" data-modal-title>Room Type</h3>
          <button class="rounded-md px-2 py-1 text-slate-500 hover:bg-slate-100" data-modal-close>âœ•</button>
        </div>
        <div class="mt-3 space-y-2 text-sm text-slate-600 flex-1 overflow-auto" data-modal-body></div>
        <div class="mt-4 flex justify-end gap-2 border-t border-slate-100 pt-3 bg-white" data-modal-actions>
          <button class="rounded-lg border border-slate-200 px-3 py-2 text-sm font-medium hover:border-brand-500 hover:text-brand-600" data-modal-cancel>Close</button>
          <button class="rounded-lg border border-slate-200 px-3 py-2 text-sm font-medium hover:border-brand-500 hover:text-brand-600" data-modal-save>Save</button>
        </div>
      </div>
    </div>
  </Card>

  <script>
    // Simple client-side search and modal mock behaviors
    // Use document-scoped queries to avoid issues with currentScript in some bundlers.
    const root = document;
    const table = root.querySelector('[data-table]');
    const tbody = root.querySelector('[data-tbody]');
    const search = root.querySelector('[data-search]');

    const modal = root.querySelector('[data-modal]');
    const modalTitle = root.querySelector('[data-modal-title]');
    const modalBody = root.querySelector('[data-modal-body]');
    const modalActions = root.querySelector('[data-modal-actions]');
    const modalSave = root.querySelector('[data-modal-save]');
    const modalClose = root.querySelector('[data-modal-close]');
    const modalCancel = root.querySelector('[data-modal-cancel]');

    const openModal = () => modal && modal.classList.remove('hidden');
    const closeModal = () => {
      if (!modal) return;
      modal.classList.add('hidden');
      setMode('view');
    };

    let modalMode = 'view';
    const setMode = (mode) => {
      modalMode = mode;
      if (modalSave) modalSave.classList.toggle('hidden', mode !== 'edit');
    };

    const getRowById = (id) => tbody?.querySelector(`[data-id="${id}"]`)?.closest('[data-row]');

    search?.addEventListener('input', () => {
      const q = search.value.toLowerCase();
      tbody?.querySelectorAll('[data-row]').forEach((tr) => {
        const hay = tr.getAttribute('data-text')?.toLowerCase() ?? '';
        tr.classList.toggle('hidden', !hay.includes(q));
      });
    });

    tbody?.querySelectorAll('[data-view]').forEach((btn) => {
      btn.addEventListener('click', () => {
        const id = btn.getAttribute('data-id');
        const row = btn.closest('[data-row]');
        if (!row) return;
        const tds = row.querySelectorAll('td');
        if (modalTitle) modalTitle.textContent = `View Room Type`;
        if (modalBody) {
          modalBody.innerHTML = `
            <div><span class="font-semibold text-slate-900">Name:</span> ${tds[0].textContent}</div>
            <div><span class="font-semibold text-slate-900">Description:</span> ${tds[1].textContent}</div>
            <div><span class="font-semibold text-slate-900">Facilities:</span> ${tds[2].textContent}</div>
            <div><span class="font-semibold text-slate-900">Status:</span> ${tds[3].textContent}</div>
          `;
        }
        setMode('view');
        openModal();
      });
    });

    tbody?.querySelectorAll('[data-edit]').forEach((btn) => {
      btn.addEventListener('click', () => {
        if (btn.hasAttribute('disabled')) return;
        const row = btn.closest('[data-row]');
        if (!row) return;
        const tds = row.querySelectorAll('td');
        if (modalTitle) modalTitle.textContent = `Edit Room Type`;
        if (modalBody) {
          modalBody.innerHTML = `
            <div class="space-y-3">
              <label class="block">
                <span class="text-xs font-semibold uppercase tracking-widest text-slate-500">Name</span>
                <input type="text" class="mt-1 w-full rounded-lg border border-slate-200 px-3 py-2 text-sm" value="${tds[0].textContent?.trim()}">
              </label>
              <label class="block">
                <span class="text-xs font-semibold uppercase tracking-widest text-slate-500">Description</span>
                <textarea class="mt-1 w-full rounded-lg border border-slate-200 px-3 py-2 text-sm" rows="3">${tds[1].textContent?.trim()}</textarea>
              </label>
              <label class="block">
                <span class="text-xs font-semibold uppercase tracking-widest text-slate-500">Facilities</span>
                <textarea class="mt-1 w-full rounded-lg border border-slate-200 px-3 py-2 text-sm" rows="2">${tds[2].textContent?.trim()}</textarea>
              </label>
            </div>
          `;
        }
        setMode('edit');
        openModal();
      });
    });

    root.querySelector('[data-add]')?.addEventListener('click', () => {
      if (modalTitle) modalTitle.textContent = `Add Room Type`;
      if (modalBody) {
        modalBody.innerHTML = `
          <div class="space-y-3">
            <label class="block">
              <span class="text-xs font-semibold uppercase tracking-widest text-slate-500">Name</span>
              <input type="text" class="mt-1 w-full rounded-lg border border-slate-200 px-3 py-2 text-sm" placeholder="e.g. Deluxe Pool View">
            </label>
            <label class="block">
              <span class="text-xs font-semibold uppercase tracking-widest text-slate-500">Description</span>
              <textarea class="mt-1 w-full rounded-lg border border-slate-200 px-3 py-2 text-sm" rows="3" placeholder="Short description..."></textarea>
            </label>
            <label class="block">
              <span class="text-xs font-semibold uppercase tracking-widest text-slate-500">Facilities</span>
              <textarea class="mt-1 w-full rounded-lg border border-slate-200 px-3 py-2 text-sm" rows="2" placeholder="Comma separated facilities"></textarea>
            </label>
          </div>
        `;
      }
      setMode('edit');
      openModal();
    });

    modalClose?.addEventListener('click', closeModal);
    modalCancel?.addEventListener('click', closeModal);
    modalSave?.addEventListener('click', () => {
      // mock save then close
      closeModal();
    });
    modal?.addEventListener('click', (e) => { if (e.target === modal) closeModal(); });
  </script>
</AppLayout>
