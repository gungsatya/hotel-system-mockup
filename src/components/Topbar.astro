---
import { formatToday } from "@utils/format";
import type { RoleCode, RoleOption } from "@data/navigation";

interface Props {
  hotelName: string;
  userName: string;
  activeRoleCode: RoleCode;
  activeRoleName: string;
  roleOptions: RoleOption[];
}

const { hotelName, userName, activeRoleCode, activeRoleName, roleOptions } = Astro.props;
---
<header class="flex h-20 items-center justify-between border-b border-slate-200 bg-white px-6 shadow-sm">
  <div class="flex flex-col">
    <span class="text-xs font-medium uppercase tracking-widest text-brand-500">{hotelName}</span>
    <span class="text-2xl font-semibold text-slate-900">Dashboard</span>
  </div>

  <div class="flex items-center gap-6 text-sm text-slate-600">
    <div class="relative hidden text-right sm:block" data-role-switcher>
      <button
        type="button"
        class="flex w-full flex-col items-end text-right"
        data-role-trigger
        aria-haspopup="true"
        aria-expanded="false"
      >
        <span class="font-semibold text-slate-900">{userName}</span>
        <span class="text-xs uppercase tracking-widest text-brand-500">
          <span data-role-name>{activeRoleName}</span>
          <span aria-hidden="true"> â€¢ </span>
          <span data-role-code>{activeRoleCode}</span>
        </span>
      </button>
      <div
        class="absolute right-0 mt-2 hidden w-64 rounded-xl border border-slate-200 bg-white p-3 text-left shadow-xl"
        data-role-menu
      >
        <p class="px-1 text-xs font-semibold uppercase tracking-widest text-slate-400">
          Switch role
        </p>
        <ul class="mt-2 space-y-1" role="listbox">
          {roleOptions.map((role) => {
            const isActive = role.code === activeRoleCode;
            const optionClasses = [
              "flex w-full items-center justify-between rounded-lg px-3 py-2 text-sm font-medium transition",
              isActive
                ? "bg-brand-50 text-brand-600"
                : "text-slate-600 hover:bg-slate-100"
            ]
              .filter(Boolean)
              .join(" ");
            return (
              <li>
                <button
                  type="button"
                  class={optionClasses}
                  data-role-option={role.code}
                  data-role-label={role.name}
                  aria-pressed={isActive ? "true" : "false"}
                  role="option"
                >
                  <span>{role.name}</span>
                  <span class="text-xs font-semibold uppercase tracking-widest text-slate-400">
                    {role.code}
                  </span>
                </button>
              </li>
            );
          })}
        </ul>
      </div>
    </div>
    <div class="flex flex-col text-right">
      <span class="text-xs font-medium uppercase tracking-widest text-slate-400">Today</span>
      <span class="font-semibold text-slate-900">{formatToday()}</span>
    </div>
    <button class="rounded-lg border border-slate-200 px-3 py-2 text-sm font-medium text-slate-700 transition hover:border-brand-500 hover:text-brand-600">
      Logout
    </button>
  </div>
</header>

<script>
  const header = document.currentScript?.previousElementSibling;
  const switcher = header?.querySelector('[data-role-switcher]');
  if (switcher instanceof HTMLElement) {
    const trigger = switcher.querySelector('[data-role-trigger]');
    const menu = switcher.querySelector('[data-role-menu]');
    const roleName = switcher.querySelector('[data-role-name]');
    const roleCode = switcher.querySelector('[data-role-code]');
    const ACTIVE_CLASSES = ['bg-brand-50', 'text-brand-600'];
    const INACTIVE_CLASSES = ['text-slate-600', 'hover:bg-slate-100'];

    const updateOptions = (activeCode) => {
      const options = switcher.querySelectorAll('[data-role-option]');
      options.forEach((option) => {
        if (!(option instanceof HTMLElement)) return;
        const code = option.getAttribute('data-role-option');
        const isActive = code === activeCode;
        option.setAttribute('aria-pressed', isActive ? 'true' : 'false');
        ACTIVE_CLASSES.forEach((cls) => option.classList.toggle(cls, isActive));
        INACTIVE_CLASSES.forEach((cls) => option.classList.toggle(cls, !isActive));
      });
    };

    const setExpanded = (expanded) => {
      if (!(trigger instanceof HTMLElement) || !(menu instanceof HTMLElement)) return;
      trigger.setAttribute('aria-expanded', expanded ? 'true' : 'false');
      menu.classList.toggle('hidden', !expanded);
    };

    const handleSelection = (option) => {
      if (!(option instanceof HTMLElement)) return;
      const code = option.getAttribute('data-role-option');
      const label = option.getAttribute('data-role-label');
      if (!code || !label) return;
      if (roleName) roleName.textContent = label;
      if (roleCode) roleCode.textContent = code;
      updateOptions(code);
      window.dispatchEvent(
        new CustomEvent('app:role-change', {
          detail: { code, label }
        })
      );
      setExpanded(false);
    };

    if (trigger instanceof HTMLElement && menu instanceof HTMLElement) {
      trigger.addEventListener('click', (event) => {
        event.stopPropagation();
        const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
        setExpanded(!isExpanded);
      });

      const options = menu.querySelectorAll('[data-role-option]');
      options.forEach((option) => {
        option.addEventListener('click', (event) => {
          event.preventDefault();
          handleSelection(option);
        });
      });

      document.addEventListener('click', (event) => {
        if (!switcher.contains(event.target)) {
          setExpanded(false);
        }
      });

      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          setExpanded(false);
        }
      });

      const initialCode =
        roleCode instanceof HTMLElement && roleCode.textContent
          ? roleCode.textContent.trim()
          : null;
      if (initialCode) {
        updateOptions(initialCode);
      }
    }
  }
</script>
